<?php

// lazy typist...
// also, don't pwn yourself ;)
function sanitize($dirty_data) {
	$clean = filter_var($dirty_data, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
	return $clean;
}

// Output an array as <pre> formatted HTML/text blob
// sanitize output as we go
function echo_response($response) {
        echo "\n<pre>\n";
        $result = "";

	if((count($response)>0) and (is_array($response))) {
		foreach($response as $line){ 
			$result .= sanitize($line)."\n"; 
		}
        	echo $result;
	} elseif(sizeof($response)>0) {
		$result = sanitize($response)."\n";
        	echo $result;
	}
	echo "\n</pre>\n";
}


// regex some IPv4 addresses out of a string and return an array
function match_IPv4($str) {
	// TODO: make sure this is best IPv4 regex to use
        //$pattern = '/(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)/';
	$pattern = '/((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))(?![\\d])/';
        $matches = array();
        //preg_match_all($pattern, $str, $matches,PREG_SET_ORDER);
        preg_match_all($pattern, $str, $matches,PREG_PATTERN_ORDER);
	return $matches;
}

// regex some IPv6 addresses out of a string and return an array
function match_IPv6($str) {
// cheat a bit so we can simplify the regex a bit later
$str_lower = strtolower($str);
$pattern='/(?<![:.\w])(?:(?:(?:[A-F0-9]{1,4}:){6}|(?=(?:[A-F0-9]{0,4}:){0,6}(?:[0-9]{1,3}\.){3}[0-9]{1,3}(?![:.\w]))(([0-9A-F]{1,4}:){0,5}|:)((:[0-9A-F]{1,4}){1,5}:|:)|::(?:[A-F0-9]{1,4}:){5})(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])|(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}|(?=(?:[A-F0-9]{0,4}:){0,7}[A-F0-9]{0,4}(?![:.\w]))(([0-9A-F]{1,4}:){1,7}|:)((:[0-9A-F]{1,4}){1,7}|:)|(?:[A-F0-9]{1,4}:){7}:|:(:[A-F0-9]{1,4}){7})(?![:.\w])/';

$pattern = '/(([0-9a-fA-F]{1,4}):){1,7}.+(\s?)/';
$pattern = '/((([0-9a-fA-F]{1,4})(:|::)){1,7})[0-9a-fA-F]+/';

$pattern = '/((([0-9a-f]{1,4})(:|::)){1,7})[0-9a-f]+(::)?/';

$pattern = '/(((([0-9a-fA-F]{1,4})(:|::)){1,7})?):?([0-9a-fA-F]{1,4})?/';


$pattern = strtolower('/(?<![:.\w])(?:(?:(?:[A-F0-9]{1,4}:){6}|(?=(?:[A-F0-9]{0,4}:){0,6}(?:[0-9]{1,3}\.){3}[0-9]{1,3}(?![:.\w]))(([0-9A-F]{1,4}:){0,5}|:)((:[0-9A-F]{1,4}){1,5}:|:)|::(?:[A-F0-9]{1,4}:){5})(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}|(?=(?:[A-F0-9]{0,4}:){0,7}[A-F0-9]{0,4}(?![:.\w]))(([0-9A-F]{1,4}:){1,7}|:)((:[0-9A-F]{1,4}){1,7}|:)|(?:[A-F0-9]{1,4}:){7}:|:(:[A-F0-9]{1,4}){7})(?![:.\w])/');

$pattern = '/(?<![:.\w])((([0-9a-fA-F]{1,4})(::?)){1,7})([0-9a-fA-F]{1,4})/';
$pattern = '/(?<![:.\w])((([0-9a-fA-F]{1,4})(::?)){1,7})([0-9a-fA-F]{1,4})(?![:.\w])/';


/*
Test values for IPv6 matching
2001:0db8:0a0b:12f0:0000:0000:0000:0001
2001:db8:a0b:12f0::1
2001:db8:0:0:0:0:2:1
2001:db8::2:1
2001:db8:0:1:1:1:1:1
2001:db8:0:0:1:0:0:1
2001:0db8:0:0:1:0:0:1
2001:db8::1:0:0:1
2001:db8::0:1:0:0:1
2001:0db8::1:0:0:1
2001:db8:0:0:1::1
2001:db8:0000:0:1::1
2001:DB8:0:0:1::1
2001:db8:aaaa:bbbb:cccc:dddd:eeee:0001
2001:db8:aaaa:bbbb:cccc:dddd:eeee:001
2001:db8:aaaa:bbbb:cccc:dddd:eeee:01
2001:db8:aaaa:bbbb:cccc:dddd:eeee:1
2001:db8:aaaa:bbbb:cccc:dddd::1
2001:db8:aaaa:bbbb:cccc:dddd:0:1
2001:db8:0:0:0::1
2001:db8:0:0::1
2001:db8:0::1
2001:db8::1
2001:db8::aaaa:0:0:1
2001:db8:0:0:aaaa::1
2001:db8:aaaa:bbbb:cccc:dddd:eeee:aaaa
2001:db8:aaaa:bbbb:cccc:dddd:eeee:AAAA
2001:db8:aaaa:bbbb:cccc:dddd:eeee:AaAa
2001:db8::
::

Other uses for later:
With port number:
[2001:db8::1]:80
2001:db8::1:80
2001:db8::1.80
2001:db8::1 port 80
2001:db8::1p80
2001:db8::1#80

With netmask:
64:FF9B::/96


(?<![:.\w])

(?:(?:(?:[A-F0-9]{1,4}:){6}|(?=(?:[A-F0-9]{0,4}:){0,6}(?:[0-9]{1,3}\.){3}[0-9]{1,3}(?![:.\w]))(([0-9A-F]{1,4}:){0,5}|:)((:[0-9A-F]{1,4}){1,5}:|:)|::(?:[A-F0-9]{1,4}:){5})(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}|(?=(?:[A-F0-9]{0,4}:){0,7}[A-F0-9]{0,4}(?![:.\w]))(([0-9A-F]{1,4}:){1,7}|:)((:[0-9A-F]{1,4}){1,7}|:)|(?:[A-F0-9]{1,4}:){7}:|:(:[A-F0-9]{1,4}){7})(?![:.\w])

(?<![:.\w])
(?:	
	(?:(?:[A-F0-9]{1,4}:){6}
	|	(?=(?:[A-F0-9]{0,4}:){0,6}(?:[0-9]{1,3}\.){3}[0-9]{1,3}(?![:.\w]))(([0-9A-F]{1,4}:){0,5}|:)((:[0-9A-F]{1,4}){1,5}:
	|	:)
	|	::(?:[A-F0-9]{1,4}:){5})

	(?:(?:25[0-5]	|	2[0-4][0-9]	|	1[0-9][0-9]	|	[1-9]?[0-9])\.){3}
	(?:25[0-5]	|	2[0-4][0-9]	|	1[0-9][0-9]	|	[1-9]?[0-9])
	(?:[A-F0-9]{1,4}:){7}[A-F0-9]{1,4}	|	(?=(?:[A-F0-9]{0,4}:){0,7}[A-F0-9]{0,4}(?![:.\w]))(([0-9A-F]{1,4}:){1,7}	|	:)((:[0-9A-F]{1,4}){1,7}|	:)	|	(?:[A-F0-9]{1,4}:){7}:	|	:(:[A-F0-9]{1,4}){7}
)

(?![:.\w])

*/
        $matches = array();
        //preg_match_all($pattern, $str, $matches,PREG_SET_ORDER);
        //preg_match_all($pattern, $str_lower, $matches,PREG_PATTERN_ORDER);
        preg_match_all($pattern, $str_lower, $matches,PREG_SET_ORDER);
	return $matches;
}



// regex some hostnames out of a string and return an array
function match_fqdn($str) {
        $pattern = '/(?<=\s?\d\s)(.+?)(?<=\s)/';
	$pattern = '/((?:[a-z][a-z\\.\\d\\-]+)\\.(?:[a-z][a-z\\-]+))(?![\\w\\.])/';
        $matches = array();
        preg_match_all($pattern, $str, $matches);
	return $matches;
}



